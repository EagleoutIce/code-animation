\ProvidesPackage{code-animation}[2022/05/22 EagleoutIce - animating runs through code with beamer]

% TODO: customize beamer stuff :D
\RequirePackage{etoolbox}
\RequirePackage{listings}
\RequirePackage{tikz}
\usetikzlibrary{tikzmark}

\RequirePackage{fontawesome}
\RequirePackage{xxcolor} % mixin

% we may want to add a new literate to be used in the code:
% TODO:
\def\ca@lst@addToLiterate#1{\protected@edef\lst@literate{\unexpanded\expandafter{\lst@literate}\unexpanded{#1}}}
\lst@Key{code-animations@add to literate}{}{\ca@lst@addToLiterate{#1}}

% TODO: redfine to kill that :D
\def\ca@colormixin@env{colormixin}
%

% i do not use groups as this has problems with lst
% as they can not be nested, one storage is enough
\def\ca@colormixin@suff{!15!lightgray}
\let\ca@oldcolormixin\@empty
\def\@ca@fadeout@start{%
\let\ca@Mixin\ca@colormixin@env
\let\ca@oldcolormixin\colorcurrentmixin
\edef\colorcurrentmixin{\ca@colormixin@suff\colorcurrentmixin}\color{.}%
}

% guard to not close unnecessary
\def\@ca@fadeout@end{\ifx\ca@colormixin@env\ca@Mixin
\let\colorcurrentmixin\ca@oldcolormixin\color{.}\fi\let\ca@Mixin\relax}%


% TODO: include comments
\def\CodeAnimationsNoFadeOut{\let\ca@fadeout@start\@empty \let\ca@fadeout@end\@empty}
\def\CodeAnimationsWithFadeOut{\let\ca@fadeout@start\@ca@fadeout@start \let\ca@fadeout@end\@ca@fadeout@end}
\CodeAnimationsWithFadeOut

\def\ca@Strut{\vphantom{\sol@font@fs@normal\sol@styles@lst@basic\strut}}

% TODO: use firstoftwo and second of two
\def\ca@InCurrentLineActive#1#2#3{%
    % AND are we in animation Run? otherwise always
    \ifnum\ca@anim@currentline>0#2
    % are we in the current line?
    \expandafter\ifnum\number\csname c@codeanim@#1@lc\endcsname=\ca@anim@currentline
    #2\else#3\fi\else#2\fi}

% the initial comments marker
\def\ca@comments@from{0}
% #1 is a coordinate prefix to be used outside
\newcommand\ca@AnimateCode[1][@]{%
\ifcsname c@codeanim@#1@lc\endcsname\else
\expandafter\newcount\csname c@codeanim@#1@lc\endcsname\fi
% reset counter in any way!
\global\csname c@codeanim@#1@lc\endcsname0\relax
% we appto locally to increment the current line counter
\appto\lsthk@OnNewLine{%
    % get the end marker for this line
    \tikzmarknode{ca@#1-\expandafter\the\csname c@codeanim@#1@lc\endcsname @end}{\ca@Strut}%
    % step the line id counter
    \global\advance\csname c@codeanim@#1@lc\endcsname by1\relax
    % done! no do the fadeout
    \ca@fadeout@end % will automatically hide if not in env
}%
% hook the start marker at the beginning:
\appto\lsthk@EveryPar{%
    % using empty so it does not jump!
    \ca@InCurrentLineActive{#1}\@empty\ca@fadeout@start
    \tikzmarknode{ca@#1-\expandafter\the\csname c@codeanim@#1@lc\endcsname @start}{\ca@Strut}%
}%
% furthermore we want to configure some numbers with beamer animations!
\ca@DecodeAnimations
% TODO: support for mid-code highlights by literates! like @ as a marker?!
% TODO: support for end
\def\ca@anim@curentlocation{start}%
}

% we make it so that any item is *command* :)
\def\@AnimationCommands{%
    % the simple animation
    \def\ca@simple##1{\def\@anim{##1}}%
    % shift commentframe
    \def\ca@resetsimple##1{\ca@simple{##1}\def\ca@comments@from{\@anim@on}}%
    \def\ca@comment##1:##2\@null{\def\@anim{##1}\def\@comment@text{##2}}%
    \def\ca@resetcomment{\def\ca@comments@from{\@anim@on}\ca@comment}%
}
\def\ca@DecodeAnimationCommand#1#2\@null{%
    \let\@anim\@empty \let\@comment@text\@empty
    \if#1. \ca@resetsimple{#2}\else
    \if#1/ \ca@comment#2\@null\else
    \if#1| \ca@resetcomment#2\@null\else
    % else do it at a number:
        \ca@simple{#1#2}%
    \fi\fi\fi
}
% used for easier expandafter to lock the anim
\def\ca@Only#1#2#3{\only<\@anim@on>{\gdef\ca@anim@currentline{#2}\gdef\ca@anim@currentcomment{#3}% we may globalize:
\gdef\ca@comments@from{#1}}}
\def\ca@DecodeAnimations{%
    \def\ca@anim@currentline{0}% default if none is active
    \@AnimationCommands
    % clear it on the start
    \only<\ca@firstslide>{\def\ca@comments@from{0}}%
    \foreach[count=\@anim@on from \ca@firstslide] \@animcode in \ca@onslide@list {
        \expandafter\ca@DecodeAnimationCommand\@animcode\@empty\@empty\@null
        \expandafter\protected@xdef\csname @\@anim@on @comment@text\endcsname{\@comment@text}
        \expandafter\protected@xdef\csname @\@anim@on @comment@location\endcsname{\@anim}
        \protected@edef\@tmpargs{{\ca@comments@from}{\@anim}{\@comment@text}}%
        \expandafter\ca@Only\@tmpargs
    }%
}

\pgfqkeys{/ca@animate@code}{%
  onslide/.store in=\ca@onslide@list,
  first slide/.store in=\ca@firstslide,
  defaults/.style={first slide=1,onslide={}}
}

\def\ca@Leftmark{\llap{\faAngleRight~}}
\def\ca@Rightmark{\rlap{~\faAngleLeft}}
\tikzset{ca@CommentNode/.style={font=\sffamily\small\slshape,gray,right=3mm,yshift=.2mm},ca@CommentNode@out/.style={ca@CommentNode,font=\sffamily\footnotesize\slshape,lightgray}}
\def\ca@DoCodeAnimation{%
\tikzpicture[overlay,remember picture]
% make the line markers :)
\ifnum\ca@anim@currentline>0
    \node[left] at (ca@\ca@cdname-\ca@anim@currentline @\ca@anim@curentlocation.east) {\ca@Leftmark};
    % put a comment there:
    \node[ca@CommentNode] at (ca@\ca@cdname-\ca@anim@currentline @end.east) {\ignorespaces\ca@anim@currentcomment};
% animate all visible ones
% do not go down:
\ifnum\ca@comments@from<\the\numexpr\insertslidenumber-1\relax
\foreach \@comment@on in {\ca@comments@from,...,\the\numexpr\insertslidenumber-1} {
    \@ifundefined{@\@comment@on @comment@text}{}{%
        \node[ca@CommentNode@out] at (ca@\ca@cdname-\csname @\@comment@on @comment@location\endcsname @end.east) {\ignorespaces\csname @\@comment@on @comment@text\endcsname};
    }
}
\fi
\fi
% \node[above right] at(current page.south west) {\insertslidenumber};
\endtikzpicture}

\newenvironment{AnimateCode}[2][@]{\begingroup
\pgfqkeys{/ca@animate@code}{defaults, #2}%
\def\ca@cdname{#1}\ca@AnimateCode[#1]}{\ca@DoCodeAnimation\endgroup}

\endinput
